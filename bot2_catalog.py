import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from database import DatabaseManager, Category, Title, Product, Size, ProductSize
from config import BOT2_TOKEN, ADMIN_IDS, BOT1_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT2_TOKEN)
bot1 = Bot(token=BOT1_TOKEN)  # –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_category_name = State()
    waiting_title_name = State()
    waiting_title_category = State()
    waiting_product_name = State()
    waiting_product_title = State()
    waiting_product_photo = State()
    waiting_size_name = State()
    waiting_size_price = State()

class CartStates(StatesGroup):
    viewing_product = State()
    viewing_cart = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
class Cart:
    def __init__(self):
        self.items = []
    
    def add_item(self, product_id, size_id, product_name, size_name, price):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        item = {
            'product_id': product_id,
            'size_id': size_id,
            'product_name': product_name,
            'size_name': size_name,
            'price': price
        }
        self.items.append(item)
    
    def remove_item(self, index):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        if 0 <= index < len(self.items):
            self.items.pop(index)
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        self.items = []
    
    def get_total_price(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        return sum(item['price'] for item in self.items)
    
    def is_empty(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –∫–æ—Ä–∑–∏–Ω—ã"""
        return len(self.items) == 0

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}

def get_user_cart(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_carts:
        user_carts[user_id] = Cart()
    return user_carts[user_id]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")]
    ])
    return keyboard

def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    with DatabaseManager.get_session() as db:
        categories = db.query(Category).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÇ {cat.name}", callback_data=f"category_{cat.id}")] 
        for cat in categories
    ] + [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    
    return keyboard

def get_titles_keyboard(category_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞–π—Ç–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    with DatabaseManager.get_session() as db:
        titles = db.query(Title).filter(Title.category_id == category_id).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìñ {title.name}", callback_data=f"title_{title.id}")] 
        for title in titles
    ] + [[InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]])
    
    return keyboard

def get_products_keyboard(title_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–∞–π—Ç–ª–∞"""
    with DatabaseManager.get_session() as db:
        products = db.query(Product).filter(
            Product.title_id == title_id,
            Product.is_active == True
        ).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üõçÔ∏è {product.name}", callback_data=f"product_{product.id}")] 
        for product in products
    ] + [[InlineKeyboardButton(text="üîô –ö —Ç–∞–π—Ç–ª–∞–º", callback_data=f"back_to_titles")]])
    
    return keyboard

def get_product_sizes_keyboard(product_id, user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    with DatabaseManager.get_session() as db:
        product_sizes = db.query(ProductSize, Size).join(Size).filter(
            ProductSize.product_id == product_id
        ).all()
    
    # product_sizes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ProductSize, Size)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üìè {sz.name} - {sz.price}‚ÇΩ",
            callback_data=f"add_to_cart_{product_id}_{sz.id}"
        )]
        for ps, sz in product_sizes
    ] + [[InlineKeyboardButton(text="üîô –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_products")]])
    
    return keyboard

def get_cart_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_user_cart(user_id)
    
    if cart.is_empty():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """–ü—Ä–∏–≤–µ—Ç üëã  
–Ø ‚Äî –∫–∞—Ç–∞–ª–æ–≥ –Ω–æ—á–Ω–∏–∫–æ–≤!  

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –ø–æ –ª—é–±–∏–º—ã–º –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–∞–º, –∏–≥—Ä–∞–º –∏ –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º —ç—Å–∫–∏–∑–∞–º üé®  

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"""
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
@dp.callback_query(F.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = """–ü—Ä–∏–≤–µ—Ç üëã  
–Ø ‚Äî –∫–∞—Ç–∞–ª–æ–≥ –Ω–æ—á–Ω–∏–∫–æ–≤!  

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –ø–æ –ª—é–±–∏–º—ã–º –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–∞–º, –∏–≥—Ä–∞–º –∏ –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º —ç—Å–∫–∏–∑–∞–º üé®  

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"""
    
    await callback.message.edit_text(welcome_text, reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "catalog")
async def process_catalog(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    catalog_text = """üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–æ—á–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –∏ —Å—Ç–∏–ª–µ–π."""
    
    await callback.message.edit_text(catalog_text, reply_markup=get_categories_keyboard())

@dp.callback_query(F.data.startswith("category_"))
async def process_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–∞–π—Ç–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    
    with DatabaseManager.get_session() as db:
        category = db.query(Category).filter(Category.id == category_id).first()
        titles = db.query(Title).filter(Title.category_id == category_id).all()
    
    if not titles:
        titles_text = f"üìÇ {category.name}\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∞–π—Ç–ª–æ–≤."
    else:
        titles_text = f"–ö—Ä—É—Ç–æ–π –≤—ã–±–æ—Ä üî•  \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª –∏–∑ —Å–ø–∏—Å–∫–∞ üëá"
    
    await callback.message.edit_text(titles_text, reply_markup=get_titles_keyboard(category_id))

@dp.callback_query(F.data.startswith("title_"))
async def process_title(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–π—Ç–ª–µ"""
    title_id = int(callback.data.split("_")[1])
    
    with DatabaseManager.get_session() as db:
        title = db.query(Title).filter(Title.id == title_id).first()
        products = db.query(Product).filter(
            Product.title_id == title_id,
            Product.is_active == True
        ).all()
    
    if not products:
        products_text = f"üìñ {title.name}\n\n–í —ç—Ç–æ–º —Ç–∞–π—Ç–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
    else:
        products_text = f"–í–æ—Ç –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã –ø–æ ¬´{title.name}¬ª ‚ú®  \n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —Ä–∞–∑–º–µ—Ä:"
    
    await callback.message.edit_text(products_text, reply_markup=get_products_keyboard(title_id))

@dp.callback_query(F.data.startswith("product_"))
async def process_product(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    product_id = int(callback.data.split("_")[1])
    
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        product_sizes = db.query(ProductSize, Size).join(Size).filter(
            ProductSize.product_id == product_id
        ).all()
    
    if not product_sizes:
        product_text = f"""üõçÔ∏è {product.name}

‚ùå –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤."""
    else:
        product_text = f"""üõçÔ∏è {product.name}

üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if product.photo_url:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=product.photo_url,
            caption=product_text,
            reply_markup=get_product_sizes_keyboard(product_id, callback.from_user.id)
        )
    else:
        await callback.message.edit_text(
            product_text,
            reply_markup=get_product_sizes_keyboard(product_id, callback.from_user.id)
        )

@dp.callback_query(F.data.startswith("add_to_cart_"))
async def process_add_to_cart(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    parts = callback.data.split("_")
    product_id = int(parts[3])
    size_id = int(parts[4])
    
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        size = db.query(Size).filter(Size.id == size_id).first()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart = get_user_cart(callback.from_user.id)
    cart.add_item(product_id, size_id, product.name, size.name, size.price)
    
    success_text = f"""‚úÖ {product.name} ¬∑ {size.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!  

–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëâ –í—ã–±—Ä–∞—Ç—å –µ—â—ë", callback_data="catalog")],
        [InlineKeyboardButton(text="üëâ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart")]
    ])
    
    await callback.message.edit_text(success_text, reply_markup=keyboard)

@dp.callback_query(F.data == "cart")
async def process_cart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_user_cart(callback.from_user.id)
    
    if cart.is_empty():
        cart_text = """üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞

–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."""
    else:
        cart_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ üõí  \n\n"
        
        for i, item in enumerate(cart.items, 1):
            cart_text += f"{i}. {item['product_name']}\n"
            cart_text += f"   üìè {item['size_name']}\n"
            cart_text += f"   üí∞ {item['price']} ‚ÇΩ\n\n"
        
        cart_text += f"üí≥ –ò—Ç–æ–≥–æ: {cart.get_total_price()} ‚ÇΩ"
    
    await callback.message.edit_text(cart_text, reply_markup=get_cart_keyboard(callback.from_user.id))

@dp.callback_query(F.data == "checkout")
async def process_checkout(callback: types.CallbackQuery):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    cart = get_user_cart(callback.from_user.id)
    
    if cart.is_empty():
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        'user_id': callback.from_user.id,
        'username': callback.from_user.username or "",
        'items': cart.items
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        order_message = f"ORDER_DATA:{json.dumps(order_data)}"
        await bot1.send_message(chat_id=callback.from_user.id, text=order_message)
        
        checkout_text = f"""‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç!

üõí –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:
"""
        
        for item in cart.items:
            checkout_text += f"‚Ä¢ {item['product_name']} ¬∑ {item['size_name']} - {item['price']} ‚ÇΩ\n"
        
        checkout_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {cart.get_total_price()} ‚ÇΩ\n\n"
        checkout_text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–ª–∞—Ç—ã! üöÄ"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {e}")
        checkout_text = """‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üõí –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:
"""
        
        for item in cart.items:
            checkout_text += f"‚Ä¢ {item['product_name']} ¬∑ {item['size_name']} - {item['price']} ‚ÇΩ\n"
        
        checkout_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {cart.get_total_price()} ‚ÇΩ\n\n"
        checkout_text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!"
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(checkout_text, reply_markup=keyboard)

@dp.callback_query(F.data == "clear_cart")
async def process_clear_cart(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_user_cart(callback.from_user.id)
    cart.clear()
    
    clear_text = """üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞

–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    
    await callback.message.edit_text(clear_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query(F.data == "back_to_categories")
async def process_back_to_categories(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    catalog_text = """üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–æ—á–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –∏ —Å—Ç–∏–ª–µ–π."""
    
    await callback.message.edit_text(catalog_text, reply_markup=get_categories_keyboard())

@dp.callback_query(F.data == "back_to_titles")
async def process_back_to_titles(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–∞–π—Ç–ª–∞–º"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å category_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    catalog_text = """üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–æ—á–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –∏ —Å—Ç–∏–ª–µ–π."""
    
    await callback.message.edit_text(catalog_text, reply_markup=get_categories_keyboard())

@dp.callback_query(F.data == "back_to_products")
async def process_back_to_products(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ–≤–∞—Ä–∞–º"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å title_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    catalog_text = """üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–æ—á–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –∏ —Å—Ç–∏–ª–µ–π."""
    
    await callback.message.edit_text(catalog_text, reply_markup=get_categories_keyboard())

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    import admin_panel
    await admin_panel.handle_admin_start(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

from sqlalchemy import create_engine, Column, Integer, String, Float, Text, ForeignKey, Boolean, DateTime, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
from config import DATABASE_URL

Base = declarative_base()

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class Category(Base):
    __tablename__ = "categories"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)
    
    # –°–≤—è–∑–∏
    titles = relationship("Title", back_populates="category")

class Title(Base):
    __tablename__ = "titles"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    category_id = Column(Integer, ForeignKey("categories.id"))
    
    # –°–≤—è–∑–∏
    category = relationship("Category", back_populates="titles")
    products = relationship("Product", back_populates="title")

class Size(Base):
    __tablename__ = "sizes"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)
    price = Column(Float, default=0.0)

class Product(Base):
    __tablename__ = "products"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    photo_url = Column(String)
    title_id = Column(Integer, ForeignKey("titles.id"))
    is_active = Column(Boolean, default=True)
    
    # –°–≤—è–∑–∏
    title = relationship("Title", back_populates="products")
    product_sizes = relationship("ProductSize", back_populates="product")

class ProductSize(Base):
    __tablename__ = "product_sizes"
    
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    size_id = Column(Integer, ForeignKey("sizes.id"))
    
    # –°–≤—è–∑–∏
    product = relationship("Product", back_populates="product_sizes")
    size = relationship("Size")

class Order(Base):
    __tablename__ = "orders"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, index=True)
    username = Column(String)
    items = Column(JSON)  # [{product_id, size_id, product_name, size_name, price}]
    delivery_method = Column(String)
    delivery_price = Column(Float, default=0.0)
    total_price = Column(Float)
    discount_amount = Column(Float, default=0.0)
    status = Column(String, default="pending")  # pending, paid, shipped, delivered
    payment_url = Column(String)
    payment_id = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Settings(Base):
    __tablename__ = "settings"
    id = Column(Integer, primary_key=True, index=True)
    description_text = Column(Text, default="")
    desc_photo_file_id = Column(String, nullable=True)
    desc_video_file_id = Column(String, nullable=True)

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)

def get_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class DatabaseManager:
    def __init__(self):
        self.db = SessionLocal()
    
    def __enter__(self):
        return self.db
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.db.close()
    
    @staticmethod
    def get_session():
        return SessionLocal()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
create_tables()

# Ensure a default settings row exists with basic text
try:
    db = SessionLocal()
    s = db.query(Settings).filter(Settings.id == 1).first()
    if not s:
        default_text = (
            "‚ú®–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ—á–Ω–∏–∫ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã‚ú®\n\n"
            "–°–µ–≥–º–µ–Ω—Ç –°–¢–ê–ù–î–ê–†–¢ - —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∞–∫—Ä–∏–ª–æ–≤–æ–π –ø–ª–∞—Å—Ç–∏–Ω—ã (—Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–ª–∞ —É–∫–∞–∑–∞–Ω –≤ —Å–º.) –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–∏:\n\n"
            "üéÜ –ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ–¥—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–µ—Ä–Ω–æ–π —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ –∏ –≤ –¥–≤—É—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö. –ò–º–µ–µ—Ç 7 —Ü–≤–µ—Ç–æ–≤ –∏ 3 —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—É–ª—å—Ç–∞ –î–£ –∏ –∫–Ω–æ–ø–∫–∏:\n\n"
            "üöÄ –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–æ–¥—Å—Ç–∞–≤–∫–∞ –ü—Ä–µ–º–∏—É–º. –ò–º–µ–µ—Ç 12 —Ü–≤–µ—Ç–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è, –±–æ–ª–µ–µ 300 —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–µ–∂–∏–º —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä. –î–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–≤—É—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö:\n\n"
            "üå† –¢–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –±–æ–ª—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—à–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–µ–Ω—É - –ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏.\n"
            "–û–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞—Ç–æ—Ä–∞ –∏ –∞–∫—Ä–∏–ª–æ–≤–æ–π –ø–ª–∞—Å—Ç–∏–Ω—ã. –ò–º–µ—é—Ç 12 —Ü–≤–µ—Ç–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è –∏ –±–æ–ª–µ–µ 200 —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        )
        s = Settings(id=1, description_text=default_text)
        db.add(s)
        db.commit()
finally:
    try:
        db.close()
    except Exception:
        pass




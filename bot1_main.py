import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import DatabaseManager, Order, Category, Title, Product, Size, ProductSize
from config import BOT1_TOKEN, BOT2_TOKEN, COMPANY_INFO, FAQ_ITEMS, DELIVERY_METHODS, ADMIN_IDS
from yookassa import Configuration, Payment
import admin_panel
import uuid
import json
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=BOT1_TOKEN)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_delivery = State()
    confirming_order = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Æ–∫–∞—Å—Å—ã
Configuration.account_id = "your_shop_id"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à shop_id
Configuration.secret_key = "your_secret_key"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à secret_key

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PAGE_SIZE = 10

async def safe_edit_message(message: types.Message, text: str, reply_markup: InlineKeyboardMarkup | None = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ ‚Äî –º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å—å, –∏–Ω–∞—á–µ ‚Äî —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        if getattr(message, 'photo', None):
            await message.edit_caption(caption=text, reply_markup=reply_markup)
        else:
            await message.edit_text(text, reply_markup=reply_markup)
    except Exception:
        await message.answer(text, reply_markup=reply_markup)

def get_manager_link(order_id: int | None = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –Ω—É–∂–Ω–æ–π —Ä–µ—Ñ-–º–µ—Ç–∫–æ–π."""
    if order_id:
        return f"https://t.me/kxrmxx_shop_bot?start=tgbot_zakaz_{order_id}"
    return "https://t.me/kxrmxx_shop_bot?start=iz_bota_ne_oformil"

def get_contact_manager_keyboard(order_id: int | None = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=get_manager_link(order_id))]
    ])

# –°–∫—Ä—ã–≤–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–ø–æ–π–ª–µ—Ä)
PRODUCT_SPOILER_TEXT = (
    "<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–∏—Ö –Ω–æ—á–Ω–∏–∫–∞—Ö</b>\n"
    '<span class="tg-spoiler">'
    '‚ú®–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ—á–Ω–∏–∫ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã‚ú®\n\n'
    '–°–µ–≥–º–µ–Ω—Ç –°–¢–ê–ù–î–ê–†–¢ - —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∞–∫—Ä–∏–ª–æ–≤–æ–π –ø–ª–∞—Å—Ç–∏–Ω—ã (—Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–ª–∞ —É–∫–∞–∑–∞–Ω –≤ —Å–º.) –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–∏:\n\n'
    'üéÜ –ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ–¥—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —á–µ—Ä–Ω–æ–π —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ –∏ –≤ –¥–≤—É—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö. '
    '–ò–º–µ–µ—Ç 7 —Ü–≤–µ—Ç–æ–≤ –∏ 3 —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—É–ª—å—Ç–∞ –î–£ –∏ –∫–Ω–æ–ø–∫–∏:\n\n'
    'üöÄ –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–æ–¥—Å—Ç–∞–≤–∫–∞ –ü—Ä–µ–º–∏—É–º. –ò–º–µ–µ—Ç 12 —Ü–≤–µ—Ç–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è, –±–æ–ª–µ–µ 300 —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è, '
    '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–µ–∂–∏–º —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä. –î–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–≤—É—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö:\n\n'
    'üå† –¢–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –±–æ–ª—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—à–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–µ–Ω—É - –ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏.\n'
    '–û–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞—Ç–æ—Ä–∞ –∏ –∞–∫—Ä–∏–ª–æ–≤–æ–π –ø–ª–∞—Å—Ç–∏–Ω—ã. –ò–º–µ—é—Ç 12 —Ü–≤–µ—Ç–æ–≤ —Å–≤–µ—á–µ–Ω–∏—è –∏ –±–æ–ª–µ–µ 200 —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è, '
    '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    '</span>'
)
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëâ –í—ã–±—Ä–∞—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫", callback_data="catalog")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton(text="ü§ñ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?", callback_data="features")],
        [InlineKeyboardButton(text="üßë‚Äçüíº –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑", url=get_manager_link())]
    ])
    return keyboard

# ======================
# –ö–∞—Ç–∞–ª–æ–≥: –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ======================
def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    with DatabaseManager.get_session() as db:
        categories = db.query(Category).all()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÇ {cat.name}", callback_data=f"category_{cat.id}")]
        for cat in categories
    ] + [[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]])
    return keyboard

def get_titles_keyboard(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞–π—Ç–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    with DatabaseManager.get_session() as db:
        titles = db.query(Title).filter(Title.category_id == category_id).all()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìñ {title.name}", callback_data=f"title_{title.id}")]
        for title in titles
    ] + [[InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]])
    return keyboard

def get_products_nav_keyboard(title_id: int, page: int, total_pages: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–æ–≤–∞—Ä–æ–≤"""
    buttons = []
    row = []
    if page > 1:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"products_page_{title_id}_{page-1}"))
    if page < total_pages:
        row.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"products_page_{title_id}_{page+1}"))
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="üîô –ö —Ç–∞–π—Ç–ª–∞–º", callback_data=f"back_to_titles_{title_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def paginate_products(title_id: int, page: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    with DatabaseManager.get_session() as db:
        q = db.query(Product).filter(
            Product.title_id == title_id,
            Product.is_active == True
        )
        total = q.count()
        total_pages = max(1, math.ceil(total / PAGE_SIZE))
        offset = (page - 1) * PAGE_SIZE
        products = q.order_by(Product.id.desc()).offset(offset).limit(PAGE_SIZE).all()
    return products, total_pages

async def show_products_page(callback: types.CallbackQuery, title_id: int, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–¥–æ 10 –∫–∞—Ä—Ç–æ—á–µ–∫) –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é"""
    with DatabaseManager.get_session() as db:
        title = db.query(Title).filter(Title.id == title_id).first()
    products, total_pages = paginate_products(title_id, page)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    header = f"–í–æ—Ç –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã –ø–æ ¬´{title.name}¬ª ‚ú®\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    try:
        await callback.message.edit_text(header, reply_markup=get_products_nav_keyboard(title_id, page, total_pages))
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(header, reply_markup=get_products_nav_keyboard(title_id, page, total_pages))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    for product in products:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–º–µ—Ä—ã", callback_data=f"product_{product.id}")]
        ])
        if getattr(product, 'photo_url', None):
            try:
                await callback.message.answer_photo(photo=product.photo_url, caption=f"üõçÔ∏è {product.name}", reply_markup=kb)
            except Exception:
                await callback.message.answer(f"üõçÔ∏è {product.name}", reply_markup=kb)
        else:
            await callback.message.answer(f"üõçÔ∏è {product.name}", reply_markup=kb)

def get_product_sizes_keyboard(product_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    with DatabaseManager.get_session() as db:
        product_sizes = db.query(ProductSize, Size).join(Size).filter(
            ProductSize.product_id == product_id
        ).all()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üìè {sz.name} - {sz.price}‚ÇΩ",
            callback_data=f"add_to_cart_{product_id}_{sz.id}"
        )]
        for ps, sz in product_sizes
    ] + [[InlineKeyboardButton(text="üîô –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"back_to_products_{product_id}")]])
    return keyboard

def get_delivery_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÆ {DELIVERY_METHODS['post']['name']} - {DELIVERY_METHODS['post']['price']}‚ÇΩ", 
                             callback_data="delivery_post")],
        [InlineKeyboardButton(text=f"üöö {DELIVERY_METHODS['cdek']['name']} - {DELIVERY_METHODS['cdek']['price']}‚ÇΩ", 
                             callback_data="delivery_cdek")],
        [InlineKeyboardButton(text=f"üè† {DELIVERY_METHODS['pickup']['name']} - {DELIVERY_METHODS['pickup']['price']}‚ÇΩ", 
                             callback_data="delivery_pickup")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    return keyboard

def get_payment_keyboard(payment_url):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç üëã  
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {COMPANY_INFO['name']}! –ú—ã —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞—Å—Ç–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –ø–æ –ª—é–±—ã–º –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º –≥–µ—Ä–æ—è–º ‚ú®  

–ó–∞–∫–∞–∑—ã–≤–∞—è –∑–¥–µ—Å—å, –≤ –±–æ—Ç–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ **—Å–∫–∏–¥–∫—É {COMPANY_INFO['discount_percent']}%** ‚Äî –≤–µ–¥—å –º—ã —ç–∫–æ–Ω–æ–º–∏–º –≤—Ä–µ–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üòâ  

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
    """
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

# ======================
# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–≤—ã–∑–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞)
# ======================
@router.message(Command("admin"))
async def cmd_admin_main(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    import admin_panel
    await admin_panel.handle_admin_start(message)

@router.callback_query(F.data == "catalog")
async def process_catalog(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤ —ç—Ç–æ–º –∂–µ –±–æ—Ç–µ)"""
    catalog_text = """üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–æ—á–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –∏ —Å—Ç–∏–ª–µ–π."""
    await safe_edit_message(callback.message, catalog_text, reply_markup=get_categories_keyboard())

@router.callback_query(F.data.startswith("category_"))
async def process_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–∞–π—Ç–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    with DatabaseManager.get_session() as db:
        category = db.query(Category).filter(Category.id == category_id).first()
        titles = db.query(Title).filter(Title.category_id == category_id).all()
    if not titles:
        titles_text = f"üìÇ {category.name}\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∞–π—Ç–ª–æ–≤."
    else:
        titles_text = f"–ö—Ä—É—Ç–æ–π –≤—ã–±–æ—Ä üî•  \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª –∏–∑ —Å–ø–∏—Å–∫–∞ üëá"
    await safe_edit_message(callback.message, titles_text, reply_markup=get_titles_keyboard(category_id))

@router.callback_query(F.data.startswith("back_to_titles_"))
async def process_back_to_titles(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–∞–π—Ç–ª–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç title_id, –Ω–∞–º –Ω—É–∂–µ–Ω category –ø–æ —ç—Ç–æ–º—É title
    title_id = int(callback.data.split("_")[3])
    with DatabaseManager.get_session() as db:
        title = db.query(Title).filter(Title.id == title_id).first()
    if title:
        await safe_edit_message(callback.message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª:", reply_markup=get_titles_keyboard(title.category_id))
    else:
        await process_catalog(callback)

@router.callback_query(F.data.startswith("title_"))
async def process_title(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–π—Ç–ª–µ"""
    title_id = int(callback.data.split("_")[1])
    # –ü–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ 10)
    await show_products_page(callback, title_id, page=1)

@router.callback_query(F.data.startswith("products_page_"))
async def process_products_page(callback: types.CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–æ–≤–∞—Ä–æ–≤"""
    parts = callback.data.split("_")
    title_id = int(parts[2])
    page = int(parts[3])
    await show_products_page(callback, title_id, page)

@router.callback_query(F.data.startswith("back_to_products_"))
async def process_back_to_products(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ–≤–∞—Ä–∞–º –¥–ª—è —Ç–∞–π—Ç–ª–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[3])
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        await process_catalog(callback)
        return
    # –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    title_id = product.title_id
    await show_products_page(callback, title_id, page=1)

@router.callback_query(F.data.startswith("product_"))
async def process_product(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    product_id = int(callback.data.split("_")[1])
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        product_sizes = db.query(ProductSize, Size).join(Size).filter(
            ProductSize.product_id == product_id
        ).all()
        # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Å–≤—è–∑–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ (–Ω–∞—Å–ª–µ–¥–∏–µ), –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∂–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã
        if not product_sizes:
            sizes_all = db.query(Size).all()
            for sz in sizes_all:
                db.add(ProductSize(product_id=product.id, size_id=sz.id))
            db.commit()
            product_sizes = db.query(ProductSize, Size).join(Size).filter(
                ProductSize.product_id == product_id
            ).all()
    if not product_sizes:
        product_text = f"""üõçÔ∏è {product.name}

‚ùå –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤."""
    else:
        product_text = f"""üõçÔ∏è {product.name}

üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"""
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ (file_id –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç.
    kb = get_product_sizes_keyboard(product_id)
    sent = False
    if product.photo_url:
        try:
            await callback.message.delete()
            await callback.message.answer_photo(photo=product.photo_url, caption=product_text, reply_markup=kb)
            sent = True
        except Exception:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            sent = False
    if not sent:
        try:
            await callback.message.edit_text(product_text, reply_markup=kb)
        except Exception:
            await callback.message.answer(product_text, reply_markup=kb)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä—ã–≤–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Å–ø–æ–π–ª–µ—Ä)
    try:
        await callback.message.answer(PRODUCT_SPOILER_TEXT, parse_mode=ParseMode.HTML)
    except Exception:
        pass

@router.callback_query(F.data.startswith("add_to_cart_"))
async def process_add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ ‚Üí —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—á–µ—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç–µ"""
    parts = callback.data.split("_")
    product_id = int(parts[3])
    size_id = int(parts[4])
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        size = db.query(Size).filter(Size.id == size_id).first()
    # –°–æ–±–∏—Ä–∞–µ–º order_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–ª–æ—É
    order_data = {
        'user_id': callback.from_user.id,
        'username': callback.from_user.username or "",
        'items': [{
            'product_id': product_id,
            'size_id': size_id,
            'product_name': product.name,
            'size_name': size.name,
            'price': size.price
        }]
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
    total_price = size.price
    discount_amount = total_price * COMPANY_INFO['discount_percent'] / 100
    await state.update_data(order_data=order_data, total_price=total_price, discount_amount=discount_amount)
    await state.set_state(OrderStates.waiting_for_delivery)
    items_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
    items_text += f"‚Ä¢ {product.name} ¬∑ {size.name}\n  –¶–µ–Ω–∞: {size.price} ‚ÇΩ\n\n"
    items_text += f"üí∞ –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_price} ‚ÇΩ\n"
    items_text += f"üéÅ –°–∫–∏–¥–∫–∞ {COMPANY_INFO['discount_percent']}%: -{discount_amount} ‚ÇΩ\n\n"
    items_text += f"–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="calculate_delivery")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
        [InlineKeyboardButton(text="üßë‚Äçüíº –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑", url=get_manager_link())]
    ])
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
    try:
        if getattr(callback.message, 'photo', None):
            await callback.message.edit_caption(caption=items_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(items_text, reply_markup=keyboard)
    except Exception:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        await callback.message.answer(items_text, reply_markup=keyboard)

@router.callback_query(F.data == "about")
async def process_about(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    about_text = f"""
–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –º–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∞—Ä—Ç—ã –∏ –≥–µ—Ä–æ–µ–≤ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ üåô  

–ö–∞–∂–¥—ã–π –Ω–æ—á–Ω–∏–∫ –º—ã –¥–µ–ª–∞–µ–º –≤—Ä—É—á–Ω—É—é, —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º.  
üé® –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω  
‚ö° –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã  
üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ –∏ –°–ù–ì  

–£ –Ω–∞—Å –±–æ–ª–µ–µ 1000 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Äî –∏ –º—ã —Ä–∞–¥—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –∏ –¥–ª—è –≤–∞—Å!  
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await safe_edit_message(callback.message, about_text, reply_markup=keyboard)

@router.callback_query(F.data == "faq")
async def process_faq(callback: types.CallbackQuery):
    """FAQ"""
    faq_text = """‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

‚ùì –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?  
‚Äî –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä ‚Üí –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π ‚Üí –ø–æ–ª—É—á–∞–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.  

‚ùì –ö–∞–∫–∏–µ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏?  
‚Äî –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ –∏ –°–î–≠–ö (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å—Ä–∞–∑—É).  

‚ùì –ú–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ –º–æ–µ–º—É –∞—Ä—Ç—É?  
‚Äî –ö–æ–Ω–µ—á–Ω–æ! –ú—ã –ª—é–±–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã ‚ù§Ô∏è  
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await safe_edit_message(callback.message, faq_text, reply_markup=keyboard)

@router.callback_query(F.data == "features")
async def process_features(callback: types.CallbackQuery):
    """–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"""
    features_text = """–Ø –ø–æ–º–æ–≥—É –≤–∞–º:  
‚ú® –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–æ—á–Ω–∏–∫  
‚ú® —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ –≤–∞—à –≥–æ—Ä–æ–¥  
‚ú® –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å–∫–∏–¥–∫–æ–π  
‚ú® –∏ –¥–∞–∂–µ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω  

–í—Å—ë –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤ üöÄ  
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await safe_edit_message(callback.message, features_text, reply_markup=keyboard)

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await state.clear()
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç üëã  
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {COMPANY_INFO['name']}! –ú—ã —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞—Å—Ç–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –ø–æ –ª—é–±—ã–º –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º –≥–µ—Ä–æ—è–º ‚ú®  

–ó–∞–∫–∞–∑—ã–≤–∞—è –∑–¥–µ—Å—å, –≤ –±–æ—Ç–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ **—Å–∫–∏–¥–∫—É {COMPANY_INFO['discount_percent']}%** ‚Äî –≤–µ–¥—å –º—ã —ç–∫–æ–Ω–æ–º–∏–º –≤—Ä–µ–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üòâ  

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
    """
    
    await safe_edit_message(callback.message, welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç –±–æ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
@router.message(F.text.startswith("ORDER_DATA:"))
async def process_order_from_catalog(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –æ—Ç –±–æ—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = json.loads(message.text.replace("ORDER_DATA:", ""))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_data=order_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        items_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
        total_price = 0
        
        for item in order_data['items']:
            items_text += f"‚Ä¢ {item['product_name']} ¬∑ {item['size_name']}\n"
            items_text += f"  –¶–µ–Ω–∞: {item['price']} ‚ÇΩ\n\n"
            total_price += item['price']
        
        items_text += f"üí∞ –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_price} ‚ÇΩ\n"
        items_text += f"üéÅ –°–∫–∏–¥–∫–∞ {COMPANY_INFO['discount_percent']}%: -{total_price * COMPANY_INFO['discount_percent'] / 100} ‚ÇΩ\n\n"
        
        discount_amount = total_price * COMPANY_INFO['discount_percent'] / 100
        items_text += f"–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
        
        await state.update_data(
            total_price=total_price,
            discount_amount=discount_amount
        )
        
        await state.set_state(OrderStates.waiting_for_delivery)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="calculate_delivery")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await message.answer(items_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "calculate_delivery")
async def process_calculate_delivery(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_text = """–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏

üì¶ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ ‚Äî 510 ‚ÇΩ (5-7 –¥–Ω–µ–π, –¥–æ 30 –≤ —Ä–µ–≥–∏–æ–Ω—ã)  
üöö –°–î–≠–ö ‚Äî 700 ‚ÇΩ (3-5 –¥–Ω–µ–π)  

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üëá"""
    
    await safe_edit_message(callback.message, delivery_text, reply_markup=get_delivery_keyboard())

@router.callback_query(F.data.startswith("delivery_"))
async def process_delivery_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_method = callback.data.replace("delivery_", "")
    delivery_info = DELIVERY_METHODS[delivery_method]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    order_data = data['order_data']
    total_price = data['total_price']
    discount_amount = data['discount_amount']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    delivery_price = delivery_info['price']
    final_price = total_price - discount_amount + delivery_price
    
    order_summary = f"""–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ ‚úÖ  
–¢–æ–≤–∞—Ä: {order_data['items'][0]['product_name']} ¬∑ {order_data['items'][0]['size_name']}  
–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} ‚ÇΩ  
–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_info['name']} ¬∑ {delivery_price} ‚ÇΩ  
-------------------  
–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {final_price:.0f} ‚ÇΩ  

üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –∏ –º—ã —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏–º –µ–≥–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚ú®"""
    
    await state.update_data(
        delivery_method=delivery_method,
        delivery_price=delivery_price,
        final_price=final_price
    )
    
    await state.set_state(OrderStates.confirming_order)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="create_payment")],
        [InlineKeyboardButton(text="üîô –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="calculate_delivery")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
        [InlineKeyboardButton(text="üßë‚Äçüíº –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑", url=get_manager_link())]
    ])
    
    await safe_edit_message(callback.message, order_summary, reply_markup=keyboard)

@router.callback_query(F.data == "create_payment")
async def process_create_payment(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        order_data = data['order_data']
        final_price = data['final_price']
        delivery_method = data['delivery_method']
        delivery_price = data['delivery_price']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with DatabaseManager.get_session() as db:
            order = Order(
                user_id=callback.from_user.id,
                username=callback.from_user.username or "",
                items=order_data['items'],
                delivery_method=delivery_method,
                delivery_price=delivery_price,
                total_price=final_price,
                discount_amount=data['discount_amount'],
                status="pending"
            )
            db.add(order)
            db.commit()
            db.refresh(order)
            
            order_id = order.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Æ–∫–∞—Å—Å–µ
        payment = Payment.create({
            "amount": {"value": f"{final_price:.2f}", "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": f"https://t.me/your_bot"},
            "capture": True,
            "description": f"–ó–∞–∫–∞–∑ #{order_id} - –ù–æ—á–Ω–∏–∫–∏"
        }, str(uuid.uuid4()))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
        with DatabaseManager.get_session() as db:
            db_order = db.query(Order).filter(Order.id == order_id).first()
            db_order.payment_url = payment.confirmation.confirmation_url
            db_order.payment_id = payment.id
            db.commit()
        
        payment_text = f"""üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{final_price:.0f} ‚ÇΩ**

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
        await state.update_data(order_id=order_id, payment_id=payment.id)

        await safe_edit_message(callback.message, payment_text, reply_markup=get_payment_keyboard(payment.confirmation.confirmation_url))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "confirm_payment")
async def process_confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        order_id = data.get('order_id')
        payment_id = data.get('payment_id')
        if not order_id or not payment_id:
            await callback.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –Æ–∫–∞—Å—Å–µ
        payment_obj = Payment.find_one(payment_id)
        status = getattr(payment_obj, 'status', None)
        if status != 'succeeded':
            await callback.message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑: –ø–æ–º–µ—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
        with DatabaseManager.get_session() as db:
            order = db.query(Order).filter(Order.id == order_id).first()
            if order:
                order.status = 'paid'
                db.commit()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ —Å—Å—ã–ª–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ä–µ—Ñ–º–µ—Ç–∫–æ–π
        manager_link = get_manager_link(order_id)
        thank_text = (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ ‚ù§Ô∏è\n"
            f"–í–∞—à –Ω–æ—á–Ω–∏–∫ —É–∂–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
            f"{manager_link}"
        )
        await callback.message.answer(thank_text, reply_markup=get_contact_manager_keyboard(order_id))
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.message.answer("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "cancel_order")
async def process_cancel_order(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    
    cancel_text = """‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω

–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!"""
    
    await safe_edit_message(callback.message, cancel_text, reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp = Dispatcher()
    dp.include_router(router)
    dp.include_router(admin_panel.router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

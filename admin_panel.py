import logging
from aiogram import Bot, types, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import DatabaseManager, Category, Title, Product, Size, ProductSize, Order, Settings
from config import ADMIN_IDS, BOT2_TOKEN

# –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π dp)
router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    waiting_category_name = State()
    waiting_title_name = State()
    waiting_title_category = State()
    waiting_product_name = State()
    waiting_product_title = State()
    waiting_product_photo = State()
    waiting_size_name = State()
    waiting_size_price = State()
    waiting_product_for_size = State()
    waiting_size_for_product = State()
    waiting_new_product_name = State()
    waiting_new_product_photo = State()
    waiting_new_category_name = State()
    waiting_new_title_name = State()
    waiting_edit_size_name = State()
    waiting_edit_size_price = State()
    waiting_description_text = State()
    waiting_description_photo = State()
    waiting_description_video = State()

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS
def get_admin_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_categories")],
        [InlineKeyboardButton(text="üé≠ –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª", callback_data="admin_titles")],
        [InlineKeyboardButton(text="üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
        [InlineKeyboardButton(text="üìè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏", callback_data="admin_sizes")],
        [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_desc")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥", callback_data="exit_admin")]
    ])
    
    return keyboard

def get_categories_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    with DatabaseManager.get_session() as db:
        categories = db.query(Category).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
        *[[InlineKeyboardButton(text=f"üìÇ {cat.name}", callback_data=f"edit_category_{cat.id}")] 
          for cat in categories],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    return keyboard

def get_titles_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π—Ç–ª–∞–º–∏"""
    with DatabaseManager.get_session() as db:
        titles = db.query(Title).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª", callback_data="add_title")],
        *[[InlineKeyboardButton(text=f"üìñ {title.name}", callback_data=f"edit_title_{title.id}")] 
          for title in titles],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    return keyboard

def get_category_edit_keyboard(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_category_{category_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_category_{category_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_categories")]
    ])
    return keyboard

def get_title_edit_keyboard(title_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π—Ç–ª–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_title_{title_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_title_{title_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_titles")]
    ])
    return keyboard

def get_products_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    with DatabaseManager.get_session() as db:
        products = db.query(Product).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        *[[InlineKeyboardButton(
            text=f"{'üü¢' if (product.is_active or False) else 'üî¥'} {product.name}",
            callback_data=f"edit_product_{product.id}")]
          for product in products],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    return keyboard

def get_product_edit_keyboard(product_id: int, is_active: bool):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    toggle_text = "üîì –í–∫–ª—é—á–∏—Ç—å" if not is_active else "üö´ –í—ã–∫–ª—é—á–∏—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_product_{product_id}")],
        [InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"change_photo_{product_id}")],
        [InlineKeyboardButton(text=f"{toggle_text}", callback_data=f"toggle_active_{product_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_product_{product_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_products")]
    ])
    return keyboard

def get_sizes_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    with DatabaseManager.get_session() as db:
        sizes = db.query(Size).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="add_size")],
        *[[InlineKeyboardButton(text=f"üìè {size.name} - {size.price}‚ÇΩ", callback_data=f"edit_size_{size.id}")] 
          for size in sizes],
        [InlineKeyboardButton(text="üîó –°–≤—è–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —Å —Ä–∞–∑–º–µ—Ä–æ–º", callback_data="link_product_size")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    return keyboard

DEFAULT_SIZES = [
    ("–°—Ç–∞–Ω–¥–∞—Ä—Ç 20—Å–º –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–µ", 1990.0),
    ("–°—Ç–∞–Ω–¥–∞—Ä—Ç 25—Å–º –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–µ", 2490.0),
    ("–ü—Ä–µ–º–∏—É–º 25—Å–º –Ω–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–µ", 3490.0),
    ("–ü—Ä–µ–º–∏—É–º 30—Å–º –Ω–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–µ", 4390.0),
    ("–ù–∞—Å—Ç–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å 30—Å–º", 4490.0),
    ("–ù–∞—Å—Ç–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å 35—Å–º", 4790.0),
    ("–ù–∞—Å—Ç–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å 40—Å–º", 5390.0),
    ("–ù–∞—Å—Ç–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å 45—Å–º", 5890.0),
    ("–ù–∞—Å—Ç–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å 50—Å–º", 6390.0),
    ("–ù–∞—Å—Ç–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å 55—Å–º", 7090.0),
]

def ensure_default_sizes():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    with DatabaseManager.get_session() as db:
        existing = {s.name for s in db.query(Size).all()}
        created = 0
        for name, price in DEFAULT_SIZES:
            if name not in existing:
                db.add(Size(name=name, price=price))
                created += 1
        if created:
            db.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
@router.message(Command("admin"))
async def handle_admin_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    ensure_default_sizes()
    
    admin_text = """–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω üëã  
–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"""
    
    await message.answer(admin_text, reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_back")
async def process_admin_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    admin_text = """–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω üëã  
–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"""
    
    await callback.message.edit_text(admin_text, reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_categories")
async def process_admin_categories(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    categories_text = """üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(categories_text, reply_markup=get_categories_admin_keyboard())

@router.callback_query(F.data == "admin_titles")
async def process_admin_titles(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π—Ç–ª–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    titles_text = """üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π—Ç–ª–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(titles_text, reply_markup=get_titles_admin_keyboard())

@router.callback_query(F.data == "admin_products")
async def process_admin_products(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    products_text = """üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(products_text, reply_markup=get_products_admin_keyboard())

# ==============================
# –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞
# ==============================
def get_desc_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="desc_edit_text")],
        [InlineKeyboardButton(text="üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="desc_set_photo"), InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="desc_clear_photo")],
        [InlineKeyboardButton(text="üé¨ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="desc_set_video"), InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="desc_clear_video")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    return keyboard

@router.callback_query(F.data == "admin_desc")
async def process_admin_desc(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    with DatabaseManager.get_session() as db:
        s = db.query(Settings).filter(Settings.id == 1).first()
    text = s.description_text if s and s.description_text else "–¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω."
    media_info = []
    if s and s.desc_photo_file_id:
        media_info.append("–§–æ—Ç–æ: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        media_info.append("–§–æ—Ç–æ: –Ω–µ—Ç")
    if s and s.desc_video_file_id:
        media_info.append("–í–∏–¥–µ–æ: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        media_info.append("–í–∏–¥–µ–æ: –Ω–µ—Ç")
    summary = "üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–æ–π–ª–µ—Ä)\n\n" + text[:700] + ("‚Ä¶" if len(text) > 700 else "") + "\n\n" + "\n".join(media_info)
    await callback.message.edit_text(summary, reply_markup=get_desc_keyboard())

@router.callback_query(F.data == "desc_edit_text")
async def process_desc_edit_text(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_description_text)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=kb)

@router.message(AdminStates.waiting_description_text)
async def process_desc_text_message(message: types.Message, state: FSMContext):
    text = message.text or ""
    with DatabaseManager.get_session() as db:
        s = db.query(Settings).filter(Settings.id == 1).first()
        if not s:
            s = Settings(id=1, description_text=text)
            db.add(s)
        else:
            s.description_text = text
        db.commit()
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_desc_keyboard())

@router.callback_query(F.data == "desc_set_photo")
async def process_desc_set_photo(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_description_photo)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb)

@router.message(AdminStates.waiting_description_photo, F.photo)
async def process_desc_photo_message(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    with DatabaseManager.get_session() as db:
        s = db.query(Settings).filter(Settings.id == 1).first()
        if not s:
            s = Settings(id=1, desc_photo_file_id=file_id)
            db.add(s)
        else:
            s.desc_photo_file_id = file_id
        db.commit()
    await state.clear()
    await message.answer("‚úÖ –§–æ—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_desc_keyboard())

@router.callback_query(F.data == "desc_clear_photo")
async def process_desc_clear_photo(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    with DatabaseManager.get_session() as db:
        s = db.query(Settings).filter(Settings.id == 1).first()
        if s:
            s.desc_photo_file_id = None
            db.commit()
    await callback.message.edit_text("‚úÖ –§–æ—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_desc_keyboard())

@router.callback_query(F.data == "desc_set_video")
async def process_desc_set_video(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_description_video)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("üé¨ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb)

@router.message(AdminStates.waiting_description_video, F.video)
async def process_desc_video_message(message: types.Message, state: FSMContext):
    file_id = message.video.file_id
    with DatabaseManager.get_session() as db:
        s = db.query(Settings).filter(Settings.id == 1).first()
        if not s:
            s = Settings(id=1, desc_video_file_id=file_id)
            db.add(s)
        else:
            s.desc_video_file_id = file_id
        db.commit()
    await state.clear()
    await message.answer("‚úÖ –í–∏–¥–µ–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_desc_keyboard())

@router.callback_query(F.data == "desc_clear_video")
async def process_desc_clear_video(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    with DatabaseManager.get_session() as db:
        s = db.query(Settings).filter(Settings.id == 1).first()
        if s:
            s.desc_video_file_id = None
            db.commit()
    await callback.message.edit_text("‚úÖ –í–∏–¥–µ–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_desc_keyboard())

# ==============================
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ
# ==============================
@router.callback_query(F.data.startswith("edit_category_"))
async def process_edit_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    category_id = int(callback.data.split("_")[2])
    with DatabaseManager.get_session() as db:
        cat = db.query(Category).filter(Category.id == category_id).first()
    if not cat:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    text = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat.name}"
    await callback.message.edit_text(text, reply_markup=get_category_edit_keyboard(category_id))

@router.callback_query(F.data.startswith("rename_category_"))
async def process_rename_category(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    category_id = int(callback.data.split("_")[2])
    await state.update_data(edit_category_id=category_id)
    await state.set_state(AdminStates.waiting_new_category_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

@router.message(AdminStates.waiting_new_category_name)
async def process_new_category_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    category_id = data.get('edit_category_id')
    if not category_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    with DatabaseManager.get_session() as db:
        cat = db.query(Category).filter(Category.id == category_id).first()
        if not cat:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        cat.name = new_name
        db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {new_name}", reply_markup=get_category_edit_keyboard(category_id))

@router.callback_query(F.data.startswith("delete_category_"))
async def process_delete_category(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    category_id = int(callback.data.split("_")[2])
    try:
        with DatabaseManager.get_session() as db:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–π—Ç–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            titles = db.query(Title).filter(Title.category_id == category_id).all()
            for title in titles:
                # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã
                products = db.query(Product).filter(Product.title_id == title.id).all()
                for product in products:
                    db.query(ProductSize).filter(ProductSize.product_id == product.id).delete()
                    db.delete(product)
                # –£–¥–∞–ª—è–µ–º —Ç–∞–π—Ç–ª
                db.delete(title)
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            deleted = db.query(Category).filter(Category.id == category_id).delete()
            db.commit()
        if deleted:
            await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_categories_admin_keyboard())
        else:
            await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_categories_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_categories_admin_keyboard())

# ==============================
# –¢–∞–π—Ç–ª—ã: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ
# ==============================
@router.callback_query(F.data.startswith("edit_title_"))
async def process_edit_title(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    title_id = int(callback.data.split("_")[2])
    with DatabaseManager.get_session() as db:
        title = db.query(Title).filter(Title.id == title_id).first()
    if not title:
        await callback.answer("‚ùå –¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    text = f"üìñ –¢–∞–π—Ç–ª: {title.name}"
    await callback.message.edit_text(text, reply_markup=get_title_edit_keyboard(title_id))

@router.callback_query(F.data.startswith("rename_title_"))
async def process_rename_title(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    title_id = int(callback.data.split("_")[2])
    await state.update_data(edit_title_id=title_id)
    await state.set_state(AdminStates.waiting_new_title_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π—Ç–ª–∞:", reply_markup=keyboard)

@router.message(AdminStates.waiting_new_title_name)
async def process_new_title_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    title_id = data.get('edit_title_id')
    if not title_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–π—Ç–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    with DatabaseManager.get_session() as db:
        title = db.query(Title).filter(Title.id == title_id).first()
        if not title:
            await message.answer("‚ùå –¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        title.name = new_name
        db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –¢–∞–π—Ç–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {new_name}", reply_markup=get_title_edit_keyboard(title_id))

@router.callback_query(F.data.startswith("delete_title_"))
async def process_delete_title(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    title_id = int(callback.data.split("_")[2])
    try:
        with DatabaseManager.get_session() as db:
            # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã
            products = db.query(Product).filter(Product.title_id == title_id).all()
            for product in products:
                db.query(ProductSize).filter(ProductSize.product_id == product.id).delete()
                db.delete(product)
            # –£–¥–∞–ª–∏—Ç—å —Ç–∞–π—Ç–ª
            deleted = db.query(Title).filter(Title.id == title_id).delete()
            db.commit()
        if deleted:
            await callback.message.edit_text("‚úÖ –¢–∞–π—Ç–ª —É–¥–∞–ª–µ–Ω.", reply_markup=get_titles_admin_keyboard())
        else:
            await callback.message.edit_text("‚ùå –¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_titles_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π—Ç–ª–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–π—Ç–ª–∞.", reply_markup=get_titles_admin_keyboard())

@router.callback_query(F.data.startswith("edit_product_"))
async def process_edit_product(callback: types.CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    product_id = int(callback.data.split("_")[2])
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    text = f"üõçÔ∏è {product.name}\n\n–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if product.is_active else '–≤—ã–∫–ª—é—á–µ–Ω'}"
    await callback.message.edit_text(text, reply_markup=get_product_edit_keyboard(product.id, product.is_active))

@router.callback_query(F.data.startswith("toggle_active_"))
async def process_toggle_active(callback: types.CallbackQuery):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    product_id = int(callback.data.split("_")[2])
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        product.is_active = not bool(product.is_active)
        db.commit()
        is_active = product.is_active
        name = product.name
    await callback.message.edit_text(
        f"üõçÔ∏è {name}\n\n–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if is_active else '–≤—ã–∫–ª—é—á–µ–Ω'}",
        reply_markup=get_product_edit_keyboard(product_id, is_active)
    )

@router.callback_query(F.data.startswith("rename_product_"))
async def process_rename_product(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    product_id = int(callback.data.split("_")[2])
    await state.update_data(edit_product_id=product_id)
    await state.set_state(AdminStates.waiting_new_product_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

@router.message(AdminStates.waiting_new_product_name)
async def process_new_product_name(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞"""
    new_name = message.text.strip()
    data = await state.get_data()
    product_id = data.get('edit_product_id')
    if not product_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        product.name = new_name
        db.commit()
        is_active = product.is_active
    await state.clear()
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}",
        reply_markup=get_product_edit_keyboard(product_id, is_active)
    )

@router.callback_query(F.data.startswith("change_photo_"))
async def process_change_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    product_id = int(callback.data.split("_")[2])
    await state.update_data(edit_product_id=product_id)
    await state.set_state(AdminStates.waiting_new_product_photo)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

@router.message(AdminStates.waiting_new_product_photo, F.photo)
async def process_new_product_photo(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo = message.photo[-1]
    photo_file_id = photo.file_id
    data = await state.get_data()
    product_id = data.get('edit_product_id')
    if not product_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    with DatabaseManager.get_session() as db:
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        product.photo_url = photo_file_id
        db.commit()
        is_active = product.is_active
        name = product.name
    await state.clear()
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=get_product_edit_keyboard(product_id, is_active)
    )

@router.callback_query(F.data.startswith("delete_product_"))
async def process_delete_product(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ —Å–≤—è–∑–∏ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    product_id = int(callback.data.split("_")[2])
    try:
        with DatabaseManager.get_session() as db:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
            db.query(ProductSize).filter(ProductSize.product_id == product_id).delete()
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            deleted = db.query(Product).filter(Product.id == product_id).delete()
            db.commit()
        if deleted:
            await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω.", reply_markup=get_products_admin_keyboard())
        else:
            await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_products_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", reply_markup=get_products_admin_keyboard())

@router.callback_query(F.data == "admin_sizes")
async def process_admin_sizes(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    sizes_text = """üìè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(sizes_text, reply_markup=get_sizes_admin_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "add_category")
async def process_add_category(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_category_name)
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])
    
    await callback.message.edit_text(add_text, reply_markup=keyboard)

@router.message(AdminStates.waiting_category_name)
async def process_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()
    
    try:
        with DatabaseManager.get_session() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing = db.query(Category).filter(Category.name == category_name).first()
            if existing:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = Category(name=category_name)
            db.add(category)
            db.commit()
            
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π—Ç–ª–∞
@router.callback_query(F.data == "add_title")
async def process_add_title(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞–π—Ç–ª–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    with DatabaseManager.get_session() as db:
        categories = db.query(Category).all()
    
    if not categories:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÇ {cat.name}", callback_data=f"select_category_{cat.id}")] 
        for cat in categories
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π—Ç–ª–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞–π—Ç–ª–∞:"""
    
    await callback.message.edit_text(add_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("select_category_"))
async def process_select_category_for_title(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∞–π—Ç–ª–∞"""
    category_id = int(callback.data.split("_")[2])
    
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.waiting_title_name)
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π—Ç–ª–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞–π—Ç–ª–∞:"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])
    
    await callback.message.edit_text(add_text, reply_markup=keyboard)

@router.message(AdminStates.waiting_title_name)
async def process_title_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–π—Ç–ª–∞"""
    title_name = message.text.strip()
    data = await state.get_data()
    category_id = data['category_id']
    
    try:
        with DatabaseManager.get_session() as db:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π—Ç–ª
            title = Title(name=title_name, category_id=category_id)
            db.add(title)
            db.commit()
            
            await message.answer(f"‚úÖ –¢–∞–π—Ç–ª '{title_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π—Ç–ª–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∞–π—Ç–ª–∞.")
    
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "add_product")
async def process_add_product(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π—Ç–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    with DatabaseManager.get_session() as db:
        titles = db.query(Title).all()
    
    if not titles:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–∞–π—Ç–ª—ã!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìñ {title.name}", callback_data=f"select_title_{title.id}")] 
        for title in titles
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"""
    
    await callback.message.edit_text(add_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("select_title_"))
async def process_select_title_for_product(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∞–π—Ç–ª–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    title_id = int(callback.data.split("_")[2])
    
    await state.update_data(title_id=title_id)
    await state.set_state(AdminStates.waiting_product_name)
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])
    
    await callback.message.edit_text(add_text, reply_markup=keyboard)

@router.message(AdminStates.waiting_product_name)
async def process_product_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_name = message.text.strip()
    data = await state.get_data()
    title_id = data['title_id']
    
    await state.update_data(product_name=product_name)
    await state.set_state(AdminStates.waiting_product_photo)
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])
    
    await message.answer(add_text, reply_markup=keyboard)

@router.message(AdminStates.waiting_product_photo, F.photo)
async def process_product_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    photo_file_id = photo.file_id
    
    data = await state.get_data()
    product_name = data['product_name']
    title_id = data['title_id']
    
    try:
        with DatabaseManager.get_session() as db:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            product = Product(name=product_name, title_id=title_id, photo_url=photo_file_id, is_active=True)
            db.add(product)
            db.commit()
            db.refresh(product)
            # –ê–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ç–æ–≤–∞—Ä—É
            sizes = db.query(Size).all()
            for sz in sizes:
                link = ProductSize(product_id=product.id, size_id=sz.id)
                db.add(link)
            db.commit()
            
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    
    await state.clear()

@router.callback_query(F.data == "skip_photo")
async def process_skip_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    product_name = data['product_name']
    title_id = data['title_id']
    
    try:
        with DatabaseManager.get_session() as db:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –±–µ–∑ —Ñ–æ—Ç–æ
            product = Product(name=product_name, title_id=title_id, is_active=True)
            db.add(product)
            db.commit()
            db.refresh(product)
            # –ê–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ç–æ–≤–∞—Ä—É
            sizes = db.query(Size).all()
            for sz in sizes:
                link = ProductSize(product_id=product.id, size_id=sz.id)
                db.add(link)
            db.commit()
            
            await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
@router.callback_query(F.data == "add_size")
async def process_add_size(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_size_name)
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°—Ç–∞–Ω–¥–∞—Ä—Ç 25—Å–º –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–æ–¥—Å—Ç–∞–≤–∫–µ"):"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])
    
    await callback.message.edit_text(add_text, reply_markup=keyboard)

@router.message(AdminStates.waiting_size_name)
async def process_size_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    size_name = message.text.strip()
    
    await state.update_data(size_name=size_name)
    await state.set_state(AdminStates.waiting_size_price)
    
    add_text = """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞

–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –≤–∞–ª—é—Ç—ã):"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])
    
    await message.answer(add_text, reply_markup=keyboard)

@router.message(AdminStates.waiting_size_price)
async def process_size_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        price = float(message.text.strip())
        data = await state.get_data()
        size_name = data['size_name']
        
        with DatabaseManager.get_session() as db:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            size = Size(name=size_name, price=price)
            db.add(size)
            db.commit()
            db.refresh(size)
            # –ê–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–∞–º
            products = db.query(Product).all()
            for product in products:
                link = ProductSize(product_id=product.id, size_id=size.id)
                db.add(link)
            db.commit()
            
            await message.answer(f"‚úÖ –†–∞–∑–º–µ—Ä '{size_name}' —Å —Ü–µ–Ω–æ–π {price}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞.")
    
    await state.clear()

# –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º
@router.callback_query(F.data == "link_product_size")
async def process_link_product_size(callback: types.CallbackQuery, state: FSMContext):
    """–°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    with DatabaseManager.get_session() as db:
        products = db.query(Product).filter(Product.is_active == True).all()
    
    if not products:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üõçÔ∏è {product.name}", callback_data=f"select_product_{product.id}")] 
        for product in products
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    
    link_text = """üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"""
    
    await callback.message.edit_text(link_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("select_product_"))
async def process_select_product_for_size(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ä–æ–º"""
    product_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    with DatabaseManager.get_session() as db:
        sizes = db.query(Size).all()
    
    if not sizes:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ä—ã!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìè {size.name} - {size.price}‚ÇΩ", callback_data=f"select_size_{size.id}")] 
        for size in sizes
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    
    await state.update_data(product_id=product_id)
    
    link_text = """üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"""
    
    await callback.message.edit_text(link_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("select_size_"))
async def process_select_size_for_product(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º"""
    size_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    product_id = data['product_id']
    
    try:
        with DatabaseManager.get_session() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω—ã –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –∏ —Ä–∞–∑–º–µ—Ä
            existing = db.query(ProductSize).filter(
                ProductSize.product_id == product_id,
                ProductSize.size_id == size_id
            ).first()
            
            if existing:
                await callback.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º!", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            product_size = ProductSize(product_id=product_id, size_id=size_id)
            db.add(product_size)
            db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            product = db.query(Product).filter(Product.id == product_id).first()
            size = db.query(Size).filter(Size.id == size_id).first()
            
            await callback.message.edit_text(
                f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Ä–∞–∑–º–µ—Ä–æ–º '{size.name}'!"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º.")
    
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
def get_size_edit_keyboard(size_id: int):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_size_{size_id}")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"reprice_size_{size_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_size_{size_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_sizes")]
    ])
    return keyboard

@router.callback_query(F.data.startswith("edit_size_"))
async def process_edit_size(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    size_id = int(callback.data.split("_")[2])
    with DatabaseManager.get_session() as db:
        size = db.query(Size).filter(Size.id == size_id).first()
    if not size:
        await callback.answer("‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    text = f"üìè –†–∞–∑–º–µ—Ä: {size.name}\n–¶–µ–Ω–∞: {size.price}‚ÇΩ"
    await callback.message.edit_text(text, reply_markup=get_size_edit_keyboard(size_id))

@router.callback_query(F.data.startswith("rename_size_"))
async def process_rename_size(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    size_id = int(callback.data.split("_")[2])
    await state.update_data(edit_size_id=size_id)
    await state.set_state(AdminStates.waiting_edit_size_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:", reply_markup=keyboard)

@router.message(AdminStates.waiting_edit_size_name)
async def process_new_size_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    size_id = data.get('edit_size_id')
    if not size_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    with DatabaseManager.get_session() as db:
        size = db.query(Size).filter(Size.id == size_id).first()
        if not size:
            await message.answer("‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        size.name = new_name
        db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}", reply_markup=get_size_edit_keyboard(size_id))

@router.callback_query(F.data.startswith("reprice_size_"))
async def process_reprice_size(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    size_id = int(callback.data.split("_")[2])
    await state.update_data(edit_size_id=size_id)
    await state.set_state(AdminStates.waiting_edit_size_price)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]])
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):", reply_markup=keyboard)

@router.message(AdminStates.waiting_edit_size_price)
async def process_new_size_price(message: types.Message, state: FSMContext):
    try:
        new_price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")
        return
    data = await state.get_data()
    size_id = data.get('edit_size_id')
    if not size_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    with DatabaseManager.get_session() as db:
        size = db.query(Size).filter(Size.id == size_id).first()
        if not size:
            await message.answer("‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        size.price = new_price
        db.commit()
    await state.clear()
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_price}‚ÇΩ", reply_markup=get_size_edit_keyboard(size_id))

@router.callback_query(F.data.startswith("delete_size_"))
async def process_delete_size(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    size_id = int(callback.data.split("_")[2])
    try:
        with DatabaseManager.get_session() as db:
            db.query(ProductSize).filter(ProductSize.size_id == size_id).delete()
            deleted = db.query(Size).filter(Size.id == size_id).delete()
            db.commit()
        if deleted:
            await callback.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä —É–¥–∞–ª–µ–Ω.", reply_markup=get_sizes_admin_keyboard())
        else:
            await callback.message.edit_text("‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_sizes_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞.", reply_markup=get_sizes_admin_keyboard())

# –û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data == "cancel_admin")
async def process_cancel_admin(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
    await state.clear()
    
    admin_text = """–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω üëã  
–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"""
    
    await callback.message.edit_text(admin_text, reply_markup=get_admin_keyboard())

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "admin_orders")
async def process_admin_orders(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    with DatabaseManager.get_session() as db:
        orders = db.query(Order).order_by(Order.created_at.desc()).limit(10).all()
    
    if not orders:
        orders_text = "üìã –ó–∞–∫–∞–∑—ã\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        orders_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
        
        for order in orders:
            status_emoji = {
                "pending": "‚è≥",
                "paid": "‚úÖ",
                "shipped": "üöö",
                "delivered": "üì¶"
            }.get(order.status, "‚ùì")
            
            orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id}\n"
            orders_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order.username or '–±–µ–∑ username'}\n"
            orders_text += f"üí∞ –°—É–º–º–∞: {order.total_price}‚ÇΩ\n"
            orders_text += f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(orders_text, reply_markup=keyboard)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats")
async def process_admin_stats(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    with DatabaseManager.get_session() as db:
        categories_count = db.query(Category).count()
        titles_count = db.query(Title).count()
        products_count = db.query(Product).count()
        sizes_count = db.query(Size).count()
        orders_count = db.query(Order).count()
        
        total_revenue = db.query(Order).filter(Order.status == "paid").with_entities(
            db.func.sum(Order.total_price)
        ).scalar() or 0
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count}
üìñ –¢–∞–π—Ç–ª—ã: {titles_count}
üõçÔ∏è –¢–æ–≤–∞—Ä—ã: {products_count}
üìè –†–∞–∑–º–µ—Ä—ã: {sizes_count}
üìã –ó–∞–∫–∞–∑—ã: {orders_count}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚ÇΩ"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard)
